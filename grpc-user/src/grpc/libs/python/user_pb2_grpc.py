# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import user_pb2 as user__pb2


class UserStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.isUserExists = channel.unary_unary(
        '/xmpp.ejabberd.grpc.user.User/isUserExists',
        request_serializer=user__pb2.isUserExistsRequest.SerializeToString,
        response_deserializer=user__pb2.isUserExistsResponse.FromString,
        )


class UserServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def isUserExists(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_UserServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'isUserExists': grpc.unary_unary_rpc_method_handler(
          servicer.isUserExists,
          request_deserializer=user__pb2.isUserExistsRequest.FromString,
          response_serializer=user__pb2.isUserExistsResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'xmpp.ejabberd.grpc.user.User', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
